{"version":3,"file":"logger.js","sources":["utils/logger.js"],"sourcesContent":["// 日志级别\r\nconst LOG_LEVEL = {\r\n  DEBUG: 0,\r\n  INFO: 1,\r\n  WARN: 2,\r\n  ERROR: 3\r\n}\r\n\r\n// 日志存储配置\r\nconst LOG_CONFIG = {\r\n  maxSize: 1024 * 1024, // 1MB\r\n  maxDays: 7,           // 保存7天\r\n  prefix: 'pd_log_'     // 日志文件前缀\r\n}\r\n\r\nclass Logger {\r\n  constructor() {\r\n    this.level = LOG_LEVEL.INFO // 默认日志级别\r\n    this.queue = []             // 日志队列\r\n    this.timer = null          // 定时写入计时器\r\n  }\r\n\r\n  // 初始化\r\n  init() {\r\n    // 创建日志目录\r\n    try {\r\n      const fs = uni.getFileSystemManager()\r\n      const userPath = `${uni.env.USER_DATA_PATH}/logs`\r\n      \r\n      fs.access({\r\n        path: userPath,\r\n        fail: () => {\r\n          fs.mkdir({\r\n            dirPath: userPath,\r\n            recursive: true,\r\n            fail: (err) => {\r\n              console.error('创建日志目录失败:', err)\r\n              // 使用备用存储方案\r\n              this.useLocalStorage = true\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } catch(e) {\r\n      console.error('初始化日志系统失败:', e)\r\n      this.useLocalStorage = true\r\n    }\r\n\r\n    // 启动定时写入\r\n    this.startTimer()\r\n    \r\n    // 清理过期日志\r\n    this.cleanExpiredLogs()\r\n  }\r\n\r\n  // 写入日志\r\n  async write(level, ...args) {\r\n    if(level < this.level) return\r\n\r\n    const log = {\r\n      time: new Date().toISOString(),\r\n      level: Object.keys(LOG_LEVEL)[level],\r\n      content: args.map(arg => {\r\n        if(typeof arg === 'object') {\r\n          return JSON.stringify(arg)\r\n        }\r\n        return String(arg)\r\n      }).join(' ')\r\n    }\r\n\r\n    this.queue.push(log)\r\n\r\n    // 队列达到一定长度时立即写入\r\n    if(this.queue.length >= 10) {\r\n      await this.flush()\r\n    }\r\n  }\r\n\r\n  // 立即写入日志\r\n  async flush() {\r\n    if(!this.queue.length) return\r\n\r\n    const logs = this.queue.splice(0)\r\n    \r\n    if(this.useLocalStorage) {\r\n      // 使用本地存储\r\n      await this.writeToStorage(logs)\r\n    } else {\r\n      // 写入文件\r\n      await this.writeToFile(logs)\r\n    }\r\n  }\r\n\r\n  // 写入本地存储\r\n  async writeToStorage(logs) {\r\n    try {\r\n      const key = `${LOG_CONFIG.prefix}${Date.now()}`\r\n      uni.setStorageSync(key, logs)\r\n    } catch(e) {\r\n      console.error('写入日志到存储失败:', e)\r\n    }\r\n  }\r\n\r\n  // 写入文件\r\n  async writeToFile(logs) {\r\n    try {\r\n      const fs = uni.getFileSystemManager()\r\n      const fileName = `${uni.env.USER_DATA_PATH}/logs/${LOG_CONFIG.prefix}${Date.now()}.log`\r\n      \r\n      const content = logs.map(log => \r\n        `[${log.time}] [${log.level}] ${log.content}`\r\n      ).join('\\n') + '\\n'\r\n\r\n      await new Promise((resolve, reject) => {\r\n        fs.appendFile({\r\n          filePath: fileName,\r\n          data: content,\r\n          encoding: 'utf8',\r\n          success: resolve,\r\n          fail: reject\r\n        })\r\n      })\r\n    } catch(e) {\r\n      console.error('写入日志文件失败:', e)\r\n      // 失败时切换到本地存储\r\n      this.useLocalStorage = true\r\n      await this.writeToStorage(logs)\r\n    }\r\n  }\r\n\r\n  // 清理过期日志\r\n  async cleanExpiredLogs() {\r\n    try {\r\n      const now = Date.now()\r\n      const expireTime = now - LOG_CONFIG.maxDays * 24 * 60 * 60 * 1000\r\n\r\n      if(this.useLocalStorage) {\r\n        // 清理存储中的日志\r\n        const storage = uni.getStorageInfoSync()\r\n        storage.keys.forEach(key => {\r\n          if(key.startsWith(LOG_CONFIG.prefix)) {\r\n            const timestamp = parseInt(key.split('_').pop())\r\n            if(timestamp < expireTime) {\r\n              uni.removeStorageSync(key)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        // 清理文件日志\r\n        const fs = uni.getFileSystemManager()\r\n        const logPath = `${uni.env.USER_DATA_PATH}/logs`\r\n        \r\n        fs.readdir({\r\n          dirPath: logPath,\r\n          success: (res) => {\r\n            res.files.forEach(file => {\r\n              if(file.startsWith(LOG_CONFIG.prefix)) {\r\n                const filePath = `${logPath}/${file}`\r\n                fs.stat({\r\n                  path: filePath,\r\n                  success: (stat) => {\r\n                    if(stat.lastModifiedTime < expireTime) {\r\n                      fs.unlink({\r\n                        filePath,\r\n                        fail: (err) => console.error('删除过期日志失败:', err)\r\n                      })\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n    } catch(e) {\r\n      console.error('清理过期日志失败:', e)\r\n    }\r\n  }\r\n\r\n  // 启动定时写入\r\n  startTimer() {\r\n    if(this.timer) return\r\n    \r\n    this.timer = setInterval(() => {\r\n      this.flush()\r\n    }, 5000) // 每5秒写入一次\r\n  }\r\n\r\n  // 停止定时写入\r\n  stopTimer() {\r\n    if(this.timer) {\r\n      clearInterval(this.timer)\r\n      this.timer = null\r\n    }\r\n  }\r\n\r\n  // 日志方法\r\n  debug(...args) {\r\n    this.write(LOG_LEVEL.DEBUG, ...args)\r\n  }\r\n\r\n  info(...args) {\r\n    this.write(LOG_LEVEL.INFO, ...args)\r\n  }\r\n\r\n  warn(...args) {\r\n    this.write(LOG_LEVEL.WARN, ...args)\r\n  }\r\n\r\n  error(...args) {\r\n    this.write(LOG_LEVEL.ERROR, ...args)\r\n  }\r\n}\r\n\r\n// 导出单例\r\nexport const logger = new Logger()\r\n\r\n// 初始化日志系统\r\nlogger.init() "],"names":["uni"],"mappings":"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"}